# DivinityEconomy Config
# DivinityEconomy Github: https://github.com/HTTPStanley/DivinityEconomy
# Plugin author: EDGRRRR
# Author Github: https://github.com/HTTPStanley
#
# Contributors:
#   - ExRider111Ryan: https://github.com/RyanA3
#
# Other Source:
#   - Config Updater Source: https://github.com/tchristofferson/Config-Updater
#   - Vault Source: https://github.com/milkbowl/Vault
#   - mxParser Source: https://github.com/mariuszgromada/MathParser.org-mXparser
#
# Officially supported versions: 1.21
# API version: 1.20
#
# Colours for the chat config can be found here: https://jd.bukkit.org/org/bukkit/ChatColor.html
# &0 - Black
# &1 - Dark Blue
# &2 - Dark Green
# &3 - Dark Cyan
# &4 - Dark Red
# &5 - Dark Purple
# &6 - Gold
# &7 - Light Gray
# &8 - Dark Gray
# &9 - Indigo
# &A - Lime Green
# &B - Cyan
# &C - Red
# &D - Pink
# &E - Yellow
# &F - White
#
#
# PlaceholderAPI support - Requires PlaceholderAPI to be installed, which can be found on spigot:
# %de_material_inflation%                         | The material market inflation double
# %de_material_total_quantity%                    | The material market item quantity
# %de_material_total__default_quantity%           | The material market default item quantity
# %de_enchant_inflation%                          | The enchant market inflation double
# %de_enchant_total_quantity%                     | The enchant market item quantity
# %de_enchant_total__default_quantity%            | The enchant market default item quantity
# %de_format_money_<valueToFormat>%               | Returns a DE money formatted message - This supports bracket variables such as format_money_{placeholderapi_variable}
# %de_balance_math_<expression>_<value>%          | Returns a DE formatted value of the player's balance <operator> <value> - for example: math_+_1000 - returns player balance + 1000
# %de_raw_balance_math_<expression>_<value>%      | Returns a raw value of the player's balance <operator> <value> - for example: math_+_1000 - returns player balance + 1000
# %de_raw_player_balance%                         | Returns a raw value of the player's balance
# %de_player_balance%                             | Returns a DE formatted value of the player's balance
# %de_material_SValue_<materialName>_<amount>%    | Returns a DE formatted sell value of a material
# %de_material_BValue_<materialName>_<amount>%    | Returns a DE formatted buy value of a material
# %de_raw_material_SValue_<materialName>_<amount>%| Returns a raw sell value of a material
# %de_raw_material_BValue_<materialName>_<amount>%| Returns a raw buy value of a material
# %de_material_stock_<materialName>%              | Returns the amount of the material in stock
# %de_enchant_stock_<enchantName>%                | Returns the amount of the enchant in stock
# %de_material_stack_<materialName>%              | Returns the max stack size for the material given
# %de_exp_SValue_<amount>%                        | Returns a DE formatted sell value of experience
# %de_exp_BValue_<amount>%                        | Returns a DE formatted buy value of experience#
# %de_hand_value_total%                           | Returns the total value of the item in the player's hand
# %de_hand_value_material%                        | Returns the material value of the item in the player's hand
# %de_hand_value_enchant%                         | Returns the enchant value of the item in the player's hand
# %de_market_enabled_worlds%                      | Returns a list of enabled worlds for the market
# %de_economy_enabled_worlds%                     | Returns a list of enabled worlds for the economy
# %de_market_disabled_worlds%                     | Returns a list of disabled worlds for the market
# %de_economy_disabled_worlds%                    | Returns a list of disabled worlds for the economy
# %de_market_enabled_world_{worldName}            | Returns true if the market is enabled in the given world
# %de_economy_enabled_world_{worldName}           | Returns true if the economy is enabled in the given world
# %de_market_enabled%                             | Returns true if the market is enabled in the current world
# %de_economy_enabled%                            | Returns true if the economy is enabled in the current world
#
#
# Locale files can be found in the DivinityEconomy/locale. We provide the following:
# - en_GB.yml | English (UK)
# - fr_FR.yml | French
# - de_DE.yml | German
# - es_ES.yml | Spanish
# - it_IT.yml | Italian
# - ru_RU.yml | Russian
# - pt_PT.yml | Portuguese
# - nl_NL.yml | Dutch
# - pl_PL.yml | Polish
# - da_DK.yml | Danish
# - sv_SE.yml | Swedish
# - tr_TR.yml | Turkish
# - zh_CN.yml | Chinese
# - ja_JP.yml | Japanese
# - ko_KR.yml | Korean
# - ar_SA.yml | Arabic
# - hi_IN.yml | Hindi
# - he_IL.yml | Hebrew
# - pt_BR.yml | Brazilian Portuguese
# - uk_UA.yml | Ukrainian
#
# You can add your own locale files by creating a new file in the locale folder and adding the language to the config.yml. Any missing locale will use default en_GB.yml.

# CONFIG
# ANY VALUE CAN BE RESET BY DELETING IT
# USING UNEXPECTED VALUES COULD LEAD TO UNDESIRED BEHAVIOUR

# Main Settings
Main:
  # This is the plugin config version
  Version: 3.5.6
  # Should placeholder api support be enabled? ( use "true" / "false" )
  Enable PAPI: true
  # What language file should be used? ( use any string ) | default = en_GB.yml
  Language File: "en_GB.yml"
  # System Locale ( use any string ) | default = "en_GB"
  System Locale: "en_GB"
  # Should the plugin include item name translations? ( use "true" / "false" ) | default = false
  Translate Item Names: false
  # Enable bStats ( use "true" / "false" ) | default = true
  Enable bStats: true


# Chat Settings
Chat:
  # Enable chat debug ( Use "true" / "false" )
  Chat Debug: false
  # Custom console chat prefix ( use any string )
  # You can use <VERSION> to print the plugin version
  # You can use the colours shown above to customise colours
  Console Prefix: '&b[DivinityEconomy v<VERSION>]&9> '
  # Custom in-game chat prefix ( use any string )
  # You can use the colours shown above to customise colours
  Chat Prefix: '&b[D.E]&9> '
  # Chat colouring for different types of messages ( use one of these https://jd.bukkit.org/org/bukkit/ChatColor.html)
  Info Colour: 'GREEN'
  Severe Colour: 'RED'
  Warn Colour: 'YELLOW'
  Debug Colour: 'DARK_PURPLE'
  # The chat money scaling - how many digits should be printed when printing money ( use a number greater than 0 )
  # 2 = 2.00
  # 3 = 2.000
  Money Scale: 2
  # The chat money prefix - what character should be printed before the money? ( use any character )
  Money Prefix: "$"
  # The chat money suffix - what character should be printed before the money? ( use any character )
  Money Suffix: ""
  # Vault money names ( use any string )
  # Un-used
  Money Singular: "Divinity"
  Money Plural: "Divinity's"

# Message Ignore Settings
# These settings relate to the messages that are sent by the plugin into the console on certain events.
Message Ignore:
  # Should alias errors be ignored? SPAM ( use "true" / "false" )
  Ignore Alias Errors: false
  # Should item errors be ignored? SPAM ( use "true" / "false" )
  Ignore Item Errors: false
  # Should command registry be ignored? SPAM ( use "true" / "false" )
  Ignore Command Registry: true
  # Should save messages be ignored? SPAM ( use "true" / "false" )
  Ignore Save Messages: true


# World Settings
Worlds:
  # Enable world notifications ( use "true" / "false" )
  Enable Notifications: true
  Market:
    # Should the market be enabled in all worlds? ( use "true" / "false" )
    Enable All Worlds: true
    # What world should the market be enabled in?
    Enabled Worlds:
      - "world"
      - "world_nether"
      - "world_the_end"
    # Apply to item market ( use "true" / "false" )
    Apply To Items: true
    # Apply to enchant market ( use "true" / "false" )
    Apply To Enchants: true
    # Apply to experience market ( use "true" / "false" )
    Apply To Experience: true

  Economy:
    # Should the economy be enabled in all worlds? ( use "true" / "false" )
    Enable All Worlds: true
    # What world should the economy be enabled in?
    Enabled Worlds:
      - "world"
      - "world_nether"
      - "world_the_end"

# Economy Settings
Economy:
  # The minimum amount of cash that can be sent in a transaction ( use any decimal ) | recommended being left at 0.001 or .01
  Min Send Amount: 0.01
  # How often, in seconds, should the /baltop be refreshed? ( use any number above 0 )
  ListBalances Refresh Timer: 60

# Market Settings
Market:
  # How often should the internal storage be saved? (in seconds) ( use any number above 0 )
  Save Timer: 60
  # What should the minimum and maximum values of individual items be? ( use any decimal above 0 | negative number to disable ) | recommended being left as is.
  Max Item Value: -1
  Min Item Value: .001

  # Material Settings
  Materials:
    # Should the material market be enabled? ( use "true" / "false" )
    Enable: true
    # What is the base quantity? ( use any number above 0 )
    # Changing this number affects both the overall value of items and the rate at which prices change.
    Base Quantity: 1000000
    # What scaling should be applied to purchases and sales? ( use any decimal above 0 )
    # Make sure to scale sales less than purchases or you risk creating an infinite cash bug.
    Buy Scale: 0.1
    Sell Scale: 0.095
    # Should the whole market be used to determine the value of items in the form of inflation? ( use "true" / "false" ) | warning, this has not been extensively tested.
    Whole Market Inflation: false
    # Should dynamic pricing be enabled? ( use "true" / "false" )
    Dynamic Pricing: true
    # Should items such as swords have their values scaled as per the damage applied to them? ( use "true" / "false" )
    Item Damage Scaling: true
    # Should items that have names be ignored? ( use "true" / "false" )
    Ignore Named Items: true

  # Enchant Settings
  Enchants:
    # Should the enchant market be enabled? ( use "true" / "false" )
    Enable: true
    # What is the base quantity? ( use any number above 0 )
    # Changing this number affects both the overall value of items and the rate at which prices change.
    Base Quantity: 1000000
    # What scaling should be applied to purchases and sales? ( use any decimal above 0 )
    # Make sure to scale sales less than purchases or you risk creating an infinite cash bug.
    Buy Scale: 0.1
    Sell Scale: 0.095
    # Should the whole market be used to determine the value of items in the form of inflation? ( use "true" / "false" ) | warning, this has not been extensively tested.
    Whole Market Inflation: false
    # Should dynamic pricing be enabled? ( use "true" / "false" )
    Dynamic Pricing: true
    # Should unsafe enchants be allowed? This allows conflicting enchants to be purchased. Such as Power on a sword, or efficiency on a bow. ( use "true" / "false" )
    Allow Unsafe Enchants: false
    # Should items that have names be ignored? ( use "true" / "false" )
    Ignore Named Items: true

  # Experience Settings
  Experience:
    # Should the experience market be enabled? ( use "true" / "false" )
    Enable: true
    # What is the base quantity? ( use any number above 0 )
    # Changing this number affects both the overall value of items and the rate at which prices change.
    Base Quantity: 100000000000
    # What scaling should be applied to purchases and sales? ( use any decimal above 0 )
    # Make sure to scale sales less than purchases or you risk creating an infinite cash bug.
    Buy Scale: .25
    Sell Scale: .2
    # Should the whole market be used to determine the value of items in the form of inflation? ( use "true" / "false" ) | warning, this has not been extensively tested.
    Whole Market Inflation: false
    # Should dynamic pricing be enabled? ( use "true" / "false" )
    Dynamic Pricing: true

# ----- Scaling Description -----
# Buy Scale Description
# The buy scale is the scaling applied to the price of an item when it is purchased.
# The higher the number, the more expensive the item will be. The lower the number, the cheaper the item will be.
# The buy scale should always be higher than the sell scale, or you risk creating an infinite cash bug.

# Sell Scale Description
# The sell scale is the scaling applied to the price of an item when it is sold.
# The higher the number, the more expensive the item will be. The lower the number, the cheaper the item will be.
# The sell scale should always be lower than the buy scale, or you risk creating an infinite cash bug.

# In Any Case
# The scaling value is directly applied from the config to the output of the price formula.
# It is recommended to keep this value between 0 and 1, but it can be any number above 0.

# ----- Dynamic Pricing Description -----
# Dynamic pricing is based on the 'base quantity' of an item.
# The base quantity is the amount of an item that is considered to be the 'base' value of the item.
# This means that if the base quantity is 1000, and there is 1000 of an item in the market, the item will be worth 1.
# The value of 1 is then multiplied by the scaling value to get the final price of the item.
# For example 1 * 0.1 = 0.1, so the item would be worth 0.1.
# The greater the base quantity, the more of an item is required to change the price.
# The lower the base quantity, the less of an item is required to change the price.

# ---- Item Damage Scaling Description -----
# Item damage scaling is based on the damage of an item.
# This means that if item damage scaling is enabled, then the damage of an item is taken into account when calculating the price of an item.
# For example, if a sword has 10% durability, then the price of the sword will be 10% of the original price.

# ----- Whole Market Inflation Description -----
# Whole market inflation is based on the total amount of an item in the market.
# This means that if the whole market inflation is enabled, then an 'inflation' value is applied to the price of an item.
# This value is based on the total amount of all items within the market.

# ----- Changing Prices -----
# Prices are changed by the amount of an item in the market.
# To change the value of an item, you can use the /setvalue command to change the value of an item.
# This will approximately change the quantity of an item in the market to be as close as possible to the value you set. It will likely not be exact.
# Alternatively, you can use the /setstock command to change the quantity of an item in the market.


# Mail Settings
# The mail system tracks transactions between players when they are offline.
# This means that if a player sends money to another player, and the recipient is offline, upon login they will be notified of the transactions.
# This system can be navigated in-game using the /readmail and /clearmail commands.
Mail:
  # Should mail be enabled? ( use "true" / "false" )
  Enable: true
  # Enable mail notifications ( use "true" / "false" )
  # This means that the player will be notified of mail when they log in.
  Enable Notifications: true
  # Enable mail silent notifications ( use "true" / "false" )
  # This means that the player will only be notified of mail when they log in if they have unread mail.
  Enable Silent Notifications: true

# Command Settings
# What commands should be enabled? ( use "true" to enable | "false" to disable)
Commands:
  Admin:
    Clear Bal: true
    Edit Bal: true
    Set Bal: true
    Reload: true
    Save: true
    Set Stock: true
    Set Value: true
    E Set Stock: true
    E Set Value: true
    Ban Item: true
    Ban Enchant: true

  Economy:
    Balance: true
    Balance Other: true
    Send Cash: true
    ListBalances: true

  Market:
    Buy: true
    Hand Buy: true
    Hand Info: true
    Hand Sell: true
    Hand Value: true
    Info: true
    Sell: true
    Value: true
    Sell All: true
    List Items: true

  Enchant:
    E Buy: true
    E Info: true
    E Sell: true
    E Value: true
    E Hand Value: true
    E Sell All: true

  Experience:
    EXP Buy: true
    EXP Sell: true

  Mail:
    Clear Mail: true
    Read Mail: true

  Misc:
    Ping: true
    E Help: true
    Economy Notifications: true
